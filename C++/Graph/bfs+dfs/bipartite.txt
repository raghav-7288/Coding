
    bool dfs(int node, int c, vector<int>& color, vector<vector<int>>& graph){
        color[node]=c;
        for(auto it:graph[node]){
            if(color[it]==-1){
                if(!dfs(it,!c,color,graph)) return false;
            }else if(color[it]==c){
                return false;
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int> color(n,-1);
        for(int i=0;i<n;i++){
            if(color[i]==-1){
                if(!dfs(i,0,color,graph)) return false;
            }
        }
        return true;
    }

---------------------------------------------------------------------------------------------------------------------------------------------------
 
    bool isBipartite(vector<vector<int>>& adj) {
        int n=adj.size();
        vector<int> color(n,-1);
        queue<int> q;
        q.push(0);
        color[0]=0;
        while(!q.empty()){
            int node = q.front();
            int c = color[node];
            q.pop();
            for(auto it:adj[node]){
                if(color[it]==-1){
                    color[it]=!c;
                    q.push(it);
                }else if(color[it]==c) return false;
            }
        }
        return true;
    }