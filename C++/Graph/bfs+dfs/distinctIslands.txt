
    void dfs(int r, int c, int m, int n, vector<vector<int>> &vis, vector<vector<int>> &grid, vector<pair<int,int>> &path){
        vis[r][c]=1;
        int cx[4]={-1,0,1,0};
        int cy[4]={0,1,0,-1};
        for(int i=0;i<4;i++){
            int nr=r+cx[i];
            int nc=c+cy[i];
            if(nr>=0 && nr<m && nc>=0 && nc<n && grid[nr][nc] && !vis[nr][nc]){
                int x=nr-path[0].first;
                int y=nc-path[0].second;
                path.push_back({x,y});
                dfs(nr,nc,m,n,vis,grid,path);
            }
        }
    }
    int countDistinctIslands(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> vis(m,vector<int>(n,0));
        set<vector<pair<int,int>>> st;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] && !vis[i][j]){
                    vector<pair<int,int>> path;
                    path.push_back({i,j});
                    dfs(i,j,m,n,vis,grid,path);
                    path[0]={0,0};
                    st.insert(path);
                }
            }
        }
        return st.size();
    }