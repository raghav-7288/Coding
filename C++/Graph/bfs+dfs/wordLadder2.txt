Given two words, beginWord and endWord, and a dictionary wordList, 
return all the shortest transformation sequences from beginWord to endWord, 
or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].


    vector<vector<string>> findLadders(string b, string e, vector<string>& wordList) {
        unordered_set<string> st(wordList.begin(),wordList.end());
        vector<vector<string>> res;
        queue<vector<string>> q;
        q.push({b});
        while(!q.empty()){
            vector<string> cur=q.front();
            q.pop();
            string cur_w=cur.back();
            if(cur_w==e){
                if(res.empty()) res.push_back(cur);
                else if(cur.size()==res.back().size()) res.push_back(cur);
            }
            st.erase(cur_w);
            for(auto& x:cur_w){
                char init=x;
                for(char c='a';c<='z';c++){
                    x=c;
                    if(st.find(cur_w)!=st.end()){
                        cur.push_back(cur_w);
                        q.push(cur);
                        cur.pop_back();
                    }
                    x=init;
                }
            }
        }
        return res;
    }
----------------------------------------------------------------------------------------------------------------------
//better approach

->create map of dis of all words till endWord from start word;
->backTrack from endWord to startWord in the map
eg.
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log","cog"]
map->
    cog->5
    log->4
    dog->4
    dot->3
    lot->3
    hot->2
    hit->1
Output
    [["hit","hot","dot","dog","cog"],["hit","hot","lot","log","cog"]]


    void dfs(string source, string destination, vector<string>& cur, unordered_map<string,int>& mp, vector<vector<string>>& res){
        if(source==destination){
            res.push_back(cur);
            return;
        }
        int d=mp[source];
        for(auto& x:source){
            char init=x;
            for(char c='a';c<='z';c++){
                x=c;
                if(mp[source]==d-1){
                    cur.push_back(source);
                    dfs(source,destination,cur,mp,res);
                    cur.pop_back();
                }
                x=init;
            }
        }
    }
    vector<vector<string>> findLadders(string b, string e, vector<string>& wordList) {
        unordered_set<string> st(wordList.begin(),wordList.end());
        queue<pair<string,int>> q;
        q.push({b,1});
        st.erase(b);
        unordered_map<string,int> mp;
        while(!q.empty()){
            string cur=q.front().first;
            int d=q.front().second;
            q.pop();
            mp[cur]=d;
            if(cur==e) break;
            for(auto& x:cur){
                char init=x;
                for(char c='a';c<='z';c++){
                    x=c;
                    if(st.find(cur)!=st.end()){
                        q.push({cur,d+1});
                        st.erase(cur);
                    }
                    x=init;
                }
            }
        }
        if(mp.find(e)==mp.end()) return {};
        vector<vector<string>> res;
        vector<string> temp={e};
        dfs(e,b,temp,mp,res);
        for(auto& s:res) reverse(s.begin(),s.end());
        return res;
    }